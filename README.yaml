name: Terraform ACM Certificate Management
#logo: logo/logo.jpg

license: "APACHE2"

copyrights:
  - name: "Cloud Ops Works LLC"
    url: "https://cloudops.works"
    year: "2024"

github_repo: cloudopsworks/terraform-module-aws-acm-certificate

description: |-
  AWS Certificate Manager (ACM) Terraform module for comprehensive SSL/TLS certificate management supporting external (DNS validated), imported (from existing certificates), and internal (Private CA) certificate types. Features include cross-account certificate management, local and external DNS validation, automatic validation record creation, and configurable certificate options for transparency and exportability.

# Introduction to the project
introduction: |-
  This Terraform module provides a comprehensive solution for managing SSL/TLS certificates in AWS Certificate Manager (ACM). The module offers:

  Certificate Types:
  - External certificates with automated DNS validation
  - Imported certificates from external sources (using AWS Secrets Manager)
  - Internal certificates using AWS Private Certificate Authority

  Key Features:
  - Cross-account certificate management with dedicated provider configuration
  - Automatic DNS validation record creation in Route53
  - Support for both local and external DNS zones
  - Multiple domain validation with SAN support
  - Configurable certificate transparency logging
  - Certificate exportability options
  - Early renewal configuration for internal certificates

# How to use this project
usage: |-
  Module Configuration Variables:

  ```yaml
  create:
    description: "Flag to control resource creation"
    type: bool
    default: true

  certificate_type:
    description: "Type of certificate (external/imported/internal)"
    type: string
    required: true

  domain_zone:
    description: "Main domain zone for the certificate"
    type: string
    required: true

  domain_alias:
    description: "Subdomain prefix for the certificate"
    type: string
    default: ""

  domain_alternates:
    description: "List of Subject Alternative Names (SANs)"
    type: list(string)
    default: []

  cross_account:
    description: "Enable cross-account certificate management"
    type: bool
    default: false

  external_dns_zone:
    description: "Flag for external DNS zone management"
    type: bool
    default: false

  imported_cert_secret_name:
    description: "AWS Secrets Manager secret name for imported certificate"
    type: string
    default: ""

  internal_ca_arn:
    description: "ARN of Private Certificate Authority for internal certificates"
    type: string
    default: ""

  early_renewal_days:
    description: "Number of days before certificate expiry to trigger renewal"
    type: number
    default: 0

  options:
    description: "Certificate configuration options"
    type: map
    default: {}
    fields:
      certificate_transparency:
        description: "Enable/disable certificate transparency logging"
        type: bool
      exportable:
        description: "Enable/disable certificate export capability"
        type: bool
  ```

  Terragrunt Configuration:
  ```hcl
  include {
    path = find_in_parent_folders()
  }

  terraform {
    source = "git::https://github.com/cloudopsworks/terraform-module-aws-acm-certificate.git?ref=v1.0.0"
  }
  
  
  # Generate global cross_account provider block
  generate "provider_l" {
    path = "provider.l.tf"
    #   disable     = !local.cross_account
    if_exists   = "overwrite_terragrunt"
    if_disabled = "remove_terragrunt"
    contents    = <<EOF
    provider "aws" {
      alias = "${local.cross_account_alias}"
      region = "${local.cross_account_region}"
      assume_role {
        role_arn     = "${local.cross_account_sts_role_arn}"
        session_name = "terragrunt"
      }
    }
    EOF
  }

  inputs = {
    certificate_type = "external"
    domain_zone     = "example.com"
    domain_alias    = "app"
    domain_alternates = ["*.app.example.com"]

    options = {
      certificate_transparency = true
      exportable = false
    }
  }
  ```

# Example usage
examples: |-
  External Certificate with Local DNS Validation:
  ```hcl
  module "external_certificate" {
    source = "cloudopsworks/terraform-module-aws-acm-certificate"

    certificate_type = "external"
    domain_zone     = "example.com"
    domain_alias    = "api"
    domain_alternates = ["*.api.example.com"]
    cross_account   = false
    external_dns_zone = false

    options = {
      certificate_transparency = true
      exportable = false
    }
  }
  ```

  Cross-Account Certificate:
  ```hcl
  module "cross_account_cert" {
    source = "cloudopsworks/terraform-module-aws-acm-certificate"
    providers = {
      aws.cross_account = aws.dns_account
    }

    certificate_type = "external"
    domain_zone     = "example.com"
    domain_alias    = "app"
    cross_account   = true
    domain_alternates = ["api.example.com"]

    options = {
      certificate_transparency = true
      exportable = true
    }
  }
  ```

  Imported Certificate from Secrets Manager:
  ```hcl
  module "imported_cert" {
    source = "cloudopsworks/terraform-module-aws-acm-certificate"

    certificate_type = "imported"
    domain_zone     = "example.com"
    imported_cert_secret_name = "imported/wildcard-cert"

    options = {
      certificate_transparency = false
      exportable = true
    }
  }
  ```

  Internal Certificate with Private CA:
  ```hcl
  module "internal_cert" {
    source = "cloudopsworks/terraform-module-aws-acm-certificate"

    certificate_type = "internal"
    domain_zone     = "internal.example.com"
    domain_alias    = "service"
    internal_ca_arn = "arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012"
    early_renewal_days = 30

    options = {
      certificate_transparency = false
      exportable = true
    }
  }
  ```

# How to get started quickly
quickstart: |-
  1. Create a Terragrunt configuration file (terragrunt.hcl):
     ```hcl
     include {
       path = find_in_parent_folders()
     }

     terraform {
       source = "git::https://github.com/cloudopsworks/terraform-module-aws-acm-certificate.git?ref=v1.0.0"
     }

     inputs = {
       certificate_type = "external"
       domain_zone     = "example.com"
       domain_alias    = "app"
       domain_alternates = ["*.app.example.com"]

       options = {
         certificate_transparency = true
         exportable = false
       }
     }
     ```

  2. For cross-account setup, configure the provider (provider.tf):
     ```hcl
     provider "aws" {
       alias = "cross_account"
       assume_role {
         role_arn = "arn:aws:iam::ACCOUNT_ID:role/CrossAccountRole"
       }
     }
     ```

  3. Initialize Terragrunt:
     ```bash
     terragrunt init
     ```

  4. Review the planned changes:
     ```bash
     terragrunt plan
     ```

  5. Apply the configuration:
     ```bash
     terragrunt apply
     ```

  6. Monitor certificate status:
     - For external certificates: Check Route53 for validation records
     - For imported certificates: Verify secret in Secrets Manager
     - For internal certificates: Monitor Private CA for issuance

include:
  - "docs/targets.md"
  - "docs/terraform.md"

contributors:
  - name: "Cristian Beraha"
    github: "berahac"